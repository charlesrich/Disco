<?xml version="1.0" encoding="utf-8"?>
<model about="urn:secrets.wpi.edu:models:Shelter"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">

  <say id="Shelter" actor="sidekick" text="Not so fast. I can't walk much further today, and the weather's getting worse">
    <say actor="player" text="Okay. What should we do, then?">
      <say actor="sidekick" text="We need to build a shelter for the night">
        <say id="Floor" actor="player" text="Let's use pieces of that wreck to build a hut">
          <say actor="sidekick" text="Okay, the floor is flat already, so what should we build first?">
            <do task="BuildWalls">
              <say actor="sidekick" text="Do we want pillars at the front?" 
		   applicable="!world.get('shack').hasPillar('right')">
              	<say actor="player" text="Sure, let's go for it">
                  <do id="Roof" task="BuildPillars">
                    <say actor="sidekick" text="Now all that's left is the roof!">
                      <do task="BuildRoof"/>
                    </say>
                  </do>
                </say>
                <say actor="player" text="No, let's not have pillars">
                  <say actor="sidekick" ref="Roof"/>
                </say>
              </say>
              <do task="_Roof_tree"
		  applicable="world.get('shack').hasPillar('right')">
		<!---->
		<say actor="sidekick" text="Glad that's over!"/>
              </do>
            </do>
            <do task="BuildPillars">
              <say actor="sidekick" text="They look cool, but we definitely need walls">
                <do task="BuildWalls">
                  <say actor="sidekick" ref="Roof"/>
                </do>
              </say>
            </do>
          </say>
        </say>
        <say actor="player" text="We could build an igloo, I guess...">
          <say actor="sidekick" text="Ice pillars, maybe. But we don't have time for an igloo">
            <say actor="sidekick" ref="Floor"/>
          </say>
        </say>
      </say>
    </say>
  </say>

  <t:task id="BuildWalls">
    <t:subtasks id="_walls">
      <t:step name="lwall" task="BuildWall"/>
      <t:step name="twall" task="BuildWall"/>
      <t:step name="rwall" task="BuildWall"/>
      <t:binding slot="$lwall.placement" value="'left'"/>
      <t:binding slot="$lwall.who" value="false"/>
      <t:binding slot="$twall.placement" value="'top'"/>
      <t:binding slot="$twall.who" value="true"/>
      <t:binding slot="$rwall.placement" value="'right'"/>
      <t:binding slot="$rwall.who" value="false"/>
    </t:subtasks>
  </t:task>
  
  <t:task id="BuildWall">
    <t:input name="placement" type="string"/>
    <t:input name="who" type="boolean"/>
    <t:postcondition sufficient="true">
      world.get("shack").hasWall($this.placement)
    </t:postcondition>
    <t:subtasks id="_wall">
      <t:step name="choose" task="ChoosePanel"/>
      <t:step name="pickUp" task="PickUpPanel"/>
      <t:step name="place" task="PlacePanel"/>
      <t:binding slot="$choose.external" value="$this.who"/>	
      <t:binding slot="$pickUp.panel" value="$choose.panel"/>
      <t:binding slot="$place.placement" value="$this.placement"/>
      <t:binding slot="$pickUp.external" value="$this.who"/>
      <t:binding slot="$place.panel" value="$pickUp.panel"/>
      <t:binding slot="$place.external" value="$this.who"/>
    </t:subtasks>
  </t:task>
  
  <t:task id="ChoosePanel">
    <t:output name="panel" type="Packages.edu.wpi.secrets.objects.Panel"/>
    <t:script>
      $this.panel = getNearest("panel", actor($this.external));
      $this.success = ($this.panel != null);
    </t:script>
  </t:task>
  
  <t:task id="PickUpPanel">
    <t:input name="panel" type="Packages.edu.wpi.secrets.objects.Panel"/>
    <t:script>
      if ( !$this.external ) moveNPC("sidekick", $this.panel.getLocation());
      actor($this.external).pickUp($this.panel);
      $this.panel.pickUp();
    </t:script>
  </t:task>
  
  <t:task id="PlacePanel">
    <t:input name="placement" type="string"/>
    <t:input name="panel" type="Packages.edu.wpi.secrets.objects.Panel"/>
    <t:script>
      shack = world.get("shack");
      if ( !$this.external ) moveNPC("sidekick", rel(shack, 0, -1))
      if ( $this.placement == 'left' ) actor($this.external).setMovable(false);
      actor($this.external).dropCarriedObject();
      shack.place($this.placement, $this.panel);
      if ( $this.placement == 'top' ) other($this.external).setMovable(true);
    </t:script>
  </t:task>

  <t:task id="BuildPillars">
    <t:subtasks id="_pillars" ordered="false">
      <t:step name="pillar1" task="BuildPillar"/>
      <t:step name="pillar2" task="BuildPillar"/>
      <t:binding slot="$pillar1.placement" value="'left'"/>
      <t:binding slot="$pillar2.placement" value="'right'"/>
    </t:subtasks>
  </t:task>

  <t:task id="BuildPillar">
    <t:input name="placement" type="string"/>
    <t:postcondition sufficient="true">
      world.get("shack").hasPillar($this.placement)
    </t:postcondition>
    <t:subtasks id="_pillar">
      <t:step name="choose" task="ChooseShard"/>
      <t:step name="pickUp" task="PickUpShard"/>
      <t:step name="putDown" task="PlaceShard"/>
      <t:binding slot="$pickUp.shard" value="$choose.shard"/>
      <t:binding slot="$pickUp.external" value="$choose.external"/>
      <t:binding slot="$putDown.placement" value="$this.placement"/>
      <t:binding slot="$putDown.shard" value="$choose.shard"/>
      <t:binding slot="$putDown.external" value="$choose.external"/>
    </t:subtasks>
  </t:task>
  
  <t:task id="ChooseShard">
    <t:output name="shard" type="Packages.edu.wpi.secrets.objects.IceShard"/>
    <t:script>
      $this.shard = getNearest("shard", actor($this.external));
      $this.success = ($this.shard != null);
    </t:script>
  </t:task>

  <t:task id="PickUpShard">
    <t:input name="shard" type="Packages.edu.wpi.secrets.objects.IceShard"/>
    <t:precondition>
      ($this.external == undefined) || (!actor($this.external).isCarrying())
    </t:precondition>
    <t:script>
      if ( !$this.external ) { moveNPC("sidekick", $this.shard.getLocation()); }
      actor($this.external).pickUp($this.shard);
      $this.shard.pickUp();
    </t:script>
  </t:task>

  <t:task id="PlaceShard">
    <t:input name="placement" type="string"/>
    <t:input name="shard" type="Packages.edu.wpi.secrets.objects.IceShard"/>
    <t:precondition>
      ($this.external != undefined) &amp;&amp;
      (actor($this.external).getCarriedObject() == $this.shard)
    </t:precondition>
    <t:script>
      shack = world.get("shack");
      if ( !$this.external ) moveNPC("sidekick", rel(shack, 0, 1))
      actor($this.external).dropCarriedObject();
      shack.place($this.placement, $this.shard); 
    </t:script>
  </t:task>

  <t:task id="BuildRoof">
    <t:postcondition sufficient="true">
      world.get("shack").hasRoof()
    </t:postcondition>
    <t:subtasks id="_roof">
      <t:step name="choose" task="ChoosePanel"/>
      <t:step name="pickUp" task="PickUpPanel"/>
      <t:step name="place" task="PlacePanel"/>
      <t:binding slot="$pickUp.panel" value="$choose.panel"/>
      <t:binding slot="$pickUp.external" value="$choose.external"/>
      <t:binding slot="$place.placement" value="'roof'"/>
      <t:binding slot="$place.panel" value="$pickUp.panel"/>
      <t:binding slot="$place.external" value="$choose.external"/>
    </t:subtasks>
  </t:task>

  <t:script init="true">
    function actor (external) {
      if ( external == undefined ) return undefined;
      if ( external ) return world.get("player");
      return world.get("sidekick");
    }
    function other (external) {
      if ( external == undefined ) return undefined;
      if  (external ) return world.get("sidekick");
      return world.get("player");
    }
    function rel(object, offX, offY) {
      location = object.getLocation();
      return new Packages.java.awt.Point(location.x + offX, location.y + offY);
    }
    function getNearest(prefix, actor) {
      var i = 1;
      var min = 1000;
      var nearest = null;
      var current = null;
      while ( (current = world.get(prefix + "" + i)) != null ) {
        if ( !current.isPickedUp() ) {
          dist = current.getLocation().distance(actor.getLocation()); 
      	  if ( dist &lt; min ) {
      	    nearest = current;
      	    min = dist;
      	  }
      	}
      	i++;
      }
      return nearest;
    }
  </t:script>
</model>
