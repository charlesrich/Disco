    # Dec 10, 2015 7:05:14 PM - TaskEngine 1.8 / Disco 1.12
    Welcome to Disco! (Type 'help' for command list)
    #
    # This test case corresponds to Figures 5, 6 and 7 in models/Learn-Do-Teach.pdf,
    # except for Figure 5(c), which requires a separate execution (see Figure-5c.test)
    #
    # Execute this test case using bin/learn-do-teach 
    #
    # note *not* loading ABC model
  > load models/Pedagogical.xml
  > load models/Primitives.xml
    # turn off automatic turn-taking
  > next false
    # define variables for convenience
  > eval C = TaskClass.get("C"); r4 = DecompositionClass.get("r4", C)
    # Returned 'r4'
  > eval h = TaskClass.get("h"); i = TaskClass.get("i")
    # Returned 'i'
    #
    # Human teaching agent by instruction how to do C
    #
  > task LearnRecipe / C / r4 / false
    Human says "Let's learn how to do C."
  > task addStep / h / r4 / false
    Human says "First step is h."
  > next
    Agent adds step h.
  > task addStep / i / r4 / false
    Human says "Next step is i."
  > next
    Agent adds step i.
  > done LearnRecipe / C / r4 / false
    Human says "We're done learning how to do C."
  > eval compile("learn-do-teach")
    # Returned 'null'
  > debug
    #
    # Following corresponds to Figure 5(a). Note:
    #
    #  * Propose.Should and Propose.Done have been renamed to 'do' and 'done' respectively
    #  * 'false' input to LearnRecipe and LearnStep means agent ('true' means human)
    #  * segments for primitive actions (e.g., addStep) have been omitted in figure
    #
  > history 

[LearnRecipe(C,r4,false) by steps] -accepted -done <-focus
   Propose.Should(human,LearnRecipe(C,r4,false))
   [LearnStep(h,r4,false) by instruction] -done
      [addStep(agent,h,r4)] -accepted -done
         Propose.Should(human,addStep(agent,h,r4))
         addStep(agent,h,r4)
   [LearnStep(i,r4,false) by instruction] -optionalStep -done
      [addStep(agent,i,r4)] -accepted -done
         Propose.Should(human,addStep(agent,i,r4))
         addStep(agent,i,r4)
   Propose.Done(human,LearnRecipe(C,r4,false))

    # learned recipe
  > print r4

learn-do-teach
<subtasks goal="C" id="r4" xmlns="http://ce.org/cea-2018">
  <step name="step1" task="primitive:h"/>
  <step name="step2" task="primitive:i"/>
</subtasks>

    # glossed version of history
  > debug false  
  > history

[Learn how to do C by steps] -accepted -done <-focus
   Human says "Let's learn how to do C."
   [Learn step h by instruction] -done
      [Agent adds step h] -accepted -done
         Human says "First step is h."
         Agent adds step h.
   [Learn step i by instruction] -optional -done
      [Agent adds step i] -accepted -done
         Human says "Next step is i."
         Agent adds step i.
   Human says "We're done learning how to do C."

    # clear discourse state, but not task model
  > clear
  > task C
    Human says "Let's do C."
  > next
    Agent execute h.
  > next
    Agent execute i.
  > next
    Agent says "We're done doing C."
  > debug
    #
    # Following corresponds to Figure 5(b).
    # Note human acceptance of agent's done proposal omitted in figure.
    #
  > history

[C] -accepted -done <-focus
   Propose.Should(human,C)
   h(agent)
   i(agent)
   Propose.Done(agent,C)
   [Accept(human,Propose.Done(agent,C))] -live

    # glossed version of history
  > debug false
  > history

[Do C] -accepted -done <-focus
   Human says "Let's do C."
   Agent execute h.
   Agent execute i.
   Agent says "We're done doing C."
   [Human accept] -live

  > clear
    #
    # Agent teaching another human by mixture of demonstration and instructions how to do C
    #
  > task LearnRecipe / C / r4 / true / false
    Human says "Let's learn how to do C."
  > next
    Agent execute h.
  > done addStep / h / r4
    Human adds step h.
    #
    # Make agent choose instruction meta-recipe for teaching next step
    #
  > eval $disco.getFocus(true).getParent().getChildren().get(1).setDecompositionClass($disco.getDecompositionClass("instruction"))
    # Returned 'null'
  > next
    Agent says "Next step is i."
  > done
    Human adds step i.
  > next
    Agent says "We're done learning how to do C."
  > debug
    #
    # Following corresponds to Figure 5(d).
    # Note Task.Any is general Disco implementation for ?task variable
    # that is bound to h
    # See notes above for other differences with figure.
    #
  > history

[LearnRecipe(C,r4,true) by steps] -accepted -done <-focus
   Propose.Should(human,LearnRecipe(C,r4,true))
   [LearnStep(h,r4,true) by demonstration] -done
      Task.Any(agent,h)
      addStep(human,h,r4)
   [LearnStep(i,r4,true) by instruction] -optionalStep -done
      [addStep(human,i,r4)] -done
         Propose.Should(agent,addStep(human,i,r4))
         addStep(human,i,r4)
   Propose.Done(agent,LearnRecipe(C,r4,true))
   [Accept(human,Propose.Done(agent,LearnRecipe(C,r4,true)))] -live

    # glossed version of history
  > debug false
  > history

[Learn how to do C by steps] -accepted -done <-focus
   Human says "Let's learn how to do C."
   [Learn step h by demonstration] -done
      Agent execute h.
      Human adds step h.
   [Learn step i by instruction] -optional -done
      [Human adds step i] -done
         Agent says "Next step is i."
         Human adds step i.
   Agent says "We're done learning how to do C."
   [Human accept] -live

  > quit
    
