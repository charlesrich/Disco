package edu.wpi.car;

import java.io.PrintStream;
import edu.wpi.cetask.Utils;

// NB: PhysObj must cloneable because it is used in modified inputs

public class PhysObj implements Cloneable {

	// final fields public for convenience in JavaScript
	public final String name;
	public final PhysObj parent;
	
   protected final CarWorld world;
   
	protected Location location;
	
	public Location getLocation () { return location; }

	public void setLocation (Location location) { this.location = location; }
	
	public void setLocation (int x,int y,int z) { this.location = new Location(x,y,z); }

	public PhysObj (String name, Location location, PhysObj parent) {
	   if ( name == null ) throw new IllegalArgumentException("Physical object must have name!");
	   this.name = name;
	   this.location = location == null ? new Location(0, 0, 0) : location;
		this.parent = parent;
	   this.world = parent.world;   
	}

	// for objects in world with no parent
	public PhysObj (String name, Location location, CarWorld world) {
	   this.name = name;
	   this.location = location == null ? new Location(0, 0, 0) : location;
	   this.world = world;   
	   this.parent = null;
	}
	
   @Override
   public Object clone () {
      try { return super.clone(); } // default method will copy the fields above
      catch (CloneNotSupportedException e) { return null; }// cannot happen
   }
   
   @Override
   public String toString () { return name; }
   
   public void print (PrintStream stream, String indent) {
      stream.append(name + "\n");
   }

   // equals and hashCode generated by Eclipse based on name only
   // with error checking added  ****WRONG*****
   
   @Override
   public boolean equals (Object obj) {
      if ( this == obj )
         return true;
      if ( obj == null )
         return false;
      if ( getClass() != obj.getClass() )
         return false;
      PhysObj other = (PhysObj) obj;
      if ( name == null ) {
         if ( other.name != null )
            return false;
      } else if ( !name.equals(other.name) )
         return false;
      // error checking adding
      if ( !Utils.equals(location, other.location) || !Utils.equals(parent, other.parent) )
         throw new IllegalStateException("Two different PhysObj with same name: "+name);
      return true;
   }
   
   @Override
   public int hashCode () {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((name == null) ? 0 : name.hashCode());
      return result;
   }

}
