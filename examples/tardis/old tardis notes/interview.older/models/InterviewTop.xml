<?xml version="1.0"?>
<taskModel about="urn:fr.telecom-paristech:tardis:InterviewTop"
	   xmlns="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext"
	   xmlns:i="urn:fr.telecom-paristech:tardis:Interview">

  <!-- Toplevel goals for Interview model.  

       Note this file does not contain
       any locale-specific information (e.g., natural language).

       See Interview.d4g.xml for dialogue trees for steps.
       See Coach.d4g.xml for coaching interventions

       Note that for development and debugging, this model and Interview.xml
       can be run in a regular Disco console (rather than GameConsole).
  -->

  <task id="Interview">

    <subtasks id="interviewSteps">
      <step name="open" task="i:Opening"/>
      <step name="who" task="i:WhoToSee"/>
      <step name="name" task="i:ApplicantName"/>
      <step name="interview" task="InterviewPerson" />

    </subtasks>

  </task>

  <task id="InterviewPerson">

    <subtasks id="interviewPersonSteps">
      <step name="greet" task="i:GreetInterviewee"/>
      <step name="resume" task="i:GetResume"/>
      <step name="discusse" task="i:DiscussEducation" />
      <step name="discussj" task="i:DiscussLearn" />
    <!--  <step name="discussu" task="i:DiscussUsefulActivity" />  
       add when conditionals work -->
      <step name="close" task="i:Closing" />
    </subtasks>
  </task>

  <script init="true"> 
    var studentLikedAtSchool;  //all these will come from the resume
    var companyBusiness; 
    var useremotion; 
    var education1; 
    var job1; 
    var interviewee;
    var interviewer;
    var useremotion;
    companyBusiness="computer technology"; 
    useremotion="sad"; 
    interviewer="Marceau"; 
    interviewee="Daniel Blanc"; // to be input via GUI
    education1="12th grade at the Lycee de Paris"; 
    job1="Mcdonalds";

     // remove plugin that adds cancel items to menu 
     $disco.removePlugin(Packages.edu.wpi.disco.plugin.ProposeShouldNotPlugin);

     // if running in GameConsole, then add interaction for coaching
     if ( $disco.getInteraction() instanceof 
          Packages.edu.wpi.disco.game.SingleInteraction ) { 
        nway = $disco.getInteraction().getNWay();
        coach = new Packages.edu.wpi.disco.game.NPC("coach");
        // coach must be before interviewer to interject
        nway.getActiveActors().add(1, coach);
        nway.getActiveInteractions().add(
            new Packages.edu.wpi.disco.game.SingleInteraction(
                coach,
                $disco.getInteraction().getExternal(),
                $disco.getGlobal("world"),
                nway));
     }

     function file2string (file) {
        return String(new java.util.Scanner(new java.io.FileInputStream(file))
                                            .useDelimiter("\\A").next());
     }

     // load in JSON library (JSON will be standard in later version of Rhino)
     // note assuming current working directory is one level up from models
     eval(file2string("lib/json2.js"));

     // initialize current version of resume from file in test directory
     // Note: there is no comment character for JSON files!
     var $resume = JSON.parse(file2string("test/resume.json"));
          
     // function to write out a new resume to given file
     function outputResume (file) {
        var output = new java.io.FileWriter(file);
        try { output.write(JSON.stringify($resume, null, 3)); }
        finally { output.close(); }
     }
 </script>

</taskModel>

 