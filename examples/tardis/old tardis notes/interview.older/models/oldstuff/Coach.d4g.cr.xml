<?xml version="1.0"?>
<model about="urn:fr.telecom-paristech:models:Coach"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">

  <!-- 

       These are the coaching dialogs to go with InterviewTop and
       Interview.  They are organized as four toplevel goals, each
       with an enabling precondition and an associated dialogue tree,
       which in these cases are just a single exchange, but could be
       longer.
       
       See authorized keys in Coach.properties, which allow the toplevel
       goals to be stared without permission from user.

  -->

  <t:task id="CoachOpening">
    <t:precondition> isOtherChosen('correctOpening', 'Opening') </t:precondition>
    <t:subtasks id="coachOpeningSubtasks">
       <t:step name="coach" task="CoachOpeningDialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachOpeningDialog"
         text="A better way to respond would be to say 'Good morning'.  It conveys respect. Ready to try again?">
    <user text="Ok"/>
  </agent>

  <t:task id="CoachGreeting1">
    <t:precondition> isChosen('hi', 'GreetInterviewee') </t:precondition>
    <t:subtasks id="coachGreeting1Subtasks">
       <t:step name="coach" task="CoachGreeting1Dialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachGreeting1Dialog"
         text="You could respond by telling the interviewer your name.  Ready to try again?">
    <user text="Ok"/>
  </agent>

  <t:task id="CoachGreeting2">
    <t:precondition> isChosen('hey', 'GreetInterviewee') </t:precondition>
    <t:subtasks id="coachGreeting2Subtasks">
       <t:step name="coach" task="CoachGreeting2Dialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachGreeting2Dialog"
         text="You could better respond with a greeting such as 'Hello' and your name. Ready to try again?">
    <user text="Ok"/>
  </agent>

  <t:task id="CoachResume">
    <t:precondition> isChosen('noResume', 'GetResume') </t:precondition>
    <t:subtasks id="coachResumeSubtasks">
       <t:step name="coach" task="CoachResumeDialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachResumeDialog"
         text="A resume tells your employer about your past experience, both your education and work experience if you have any.  You will need a resume for your employer. After this game, you can create a resume with the ResumeHelper game. For now, start again and tell the interviewer that you did not bring one.">
    <user text="Ok"/>
  </agent>

  <t:script init="true">

    // add coaching toplevel goals

    function addTop (task) { $disco.addTop($disco.getTaskClass(task)); }
    addTop("CoachOpening"); 
    addTop("CoachGreeting1");
    addTop("CoachGreeting2");
    addTop("CoachResume");
    
    // remove plugin that adds cancel items to menu
    $disco.removePlugin(Packages.edu.wpi.disco.plugin.ProposeShouldNotPlugin);
    // remove plugin that will re-propose toplevel goals
    $disco.removePlugin(Packages.edu.wpi.disco.plugin.TopsPlugin);

    // get pointer for disco instance for interview
    var $interview = $disco.getInteraction().getNWay().getActiveInteractions().get(1).getDisco();
    if ( $interview == $disco || $interview == undefined )
      println("WARNING: $interview not correctly defined. Check that Coach model loaded into proper configuration!");

    // TODO: These utility functions should eventually be moved into Java for speed

    // returns true iff given decomposition id chosen
    function isChosen (decomp) {
       return _chosen(decomp, null); 
    }

    // returns true iff a decomposition other than given id
    // has been chosen for same task class
    // TODO: task id can be removed by computing it from decomp
    function isOtherChosen (decomp, task) {
       return _chosen(decomp, "_"+task+"_tree"); 
    }

    function _chosen (decomp, task) {
       if ( $interview == undefined ) return false; // for initialization
       var focus = $interview.getFocus();
       return focus != null &amp;&amp;
              _checkDecomp(getRoot(focus), task, "_"+decomp+"_subtasks");
    }

    function _checkDecomp (plan, task, decomp) {
       var planDecomp = plan.getDecompositionClass();
       // TODO: check namespaces
       if ( planDecomp != null ) {
          if ( planDecomp.getId() == decomp ) {
             if ( task == null ) return true;  
          } else {
             if ( plan.getGoal().getType().getId() == task )
                return true;
          }
       }
       var children = plan.children();
       while (children.hasNext()) {
         if ( _checkDecomp(children.next(), task, decomp) ) return true;
       }
       return false;
    }

    function getRoot (plan) {
      var parent = plan.getParent();
      return parent == null ? plan : getRoot(parent);
    }

  </t:script>
</model>

 