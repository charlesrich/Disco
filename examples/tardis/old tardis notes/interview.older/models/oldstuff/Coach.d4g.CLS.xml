<?xml version="1.0"?>
<model about="urn:fr.telecom-paristech:models:Coach"
       xmlns="http://www.cs.wpi.edu/~rich/d4g"
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">

  <!-- 

       These are the coaching dialogs to go with InterviewTop and
       Interview.  They are organized as four toplevel goals, each
       with an enabling preconditoin and an associated dialogue tree,
       which in these cases are just a single exchange, but could be
       longer.
       
       NB: There must be a call to addTop in the <script> block below 
       for each toplevel goal.

  -->

  <t:task id="CoachOpening">
    <t:precondition> isOtherChosen('correctOpening', 'Opening') </t:precondition>

    <t:subtasks id="coachOpeningSubtasks">
      <t:step name="coach" task="CoachOpeningDialog"/>
      <!-- <t:applicable> $interview.getGlobal("useremotion")=='happy' </t:applicable> -->
    </t:subtasks>

    <t:subtasks id="coachAltOpeningSubtasks">
      <t:step name="coachalt" task="CoachAltOpeningDialog"/>
     <!-- <t:applicable> $interview.getGlobal("useremotion")=='sad' </t:applicable> -->
    </t:subtasks>
  </t:task>

  <agent id="CoachOpeningDialog"
         text="A better way to respond would be to say 'Good morning'.  It conveys respect. Ready to try again?"
	 eval="addTop('CoachOpening')">
    <user text="Sure!"/>
    <user text="okay, I'll try again."/>
  </agent>


  <agent id="CoachAltOpeningDialog"
	 text= "You seem a bit under the weather.  If you are nervous, don't be.  This is a chance to learn and get a job! Try again with good morning."
	 eval="addTop('CoachOpening')">
    <user text="Okay I will try that."/>
  </agent>

  <t:task id="CoachGreeting1">
    <t:precondition> isChosen('hi', 'GreetInterviewee') </t:precondition>
    <t:subtasks id="coachGreeting1Subtasks">
       <t:step name="coach" task="CoachGreeting1Dialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachGreeting1Dialog"
         text="You could respond by telling the interviewer your name.  Ready to try again?"
	 eval="addTop('CoachGreeting1')">
    <user text="Ok"/>
  </agent>

  <t:task id="CoachGreeting2">
    <t:precondition> isChosen('hey', 'GreetInterviewee') </t:precondition>
    <t:subtasks id="coachGreeting2Subtasks">
       <t:step name="coach" task="CoachGreeting2Dialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachGreeting2Dialog"
         text="You could better respond with a greeting such as 'Hello' and your name. Ready to try again?"
	 eval="addTop('CoachGreeting2')">
    <user text="Ok"/>
  </agent>

  <t:task id="CoachResume">
    <t:precondition> isChosen('noResume', 'GetResume') </t:precondition>
    <t:subtasks id="coachResumeSubtasks">
       <t:step name="coach" task="CoachResumeDialog"/>
     </t:subtasks>
  </t:task>

  <agent id="CoachResumeDialog"
         text="A resume tells your employer about your past experience, both your education and work experience if you have any.  You will need a resume for your employer."> 
    <user text="uh-huh">
      <agent text="After this game, you can create a resume with the ResumeHelper game. For now, start again and tell the interviewer that you did not bring one."
	     eval="addTop('CoachResume')">
	<user text="Ok"/>
      </agent>
    </user>
  </agent>

  <t:task id="CoachClosing">
    <t:precondition> isChosen('justbye', 'Closing') </t:precondition>
    <t:subtasks id="coachClosingSubtasks">
       <t:step name="coach" task="CoachClosingDialog"/>
     </t:subtasks>
  </t:task>

<!-- what's wrong -->
 
 <agent id="CoachClosingDialog"
         text="Try just saying thank you and good bye."
	 eval="addTop('CoachClosing')">
    <user text="Sure"/>
  </agent>
  
 <t:task id="CoachCompanies">
    <t:precondition> isChosen('nojob', 'Closing') </t:precondition>
    <t:subtasks id="coachCompanies">
       <t:step name="coach" task="CoachExplainsCompanies"/>
     </t:subtasks>
  </t:task>

 <agent id="CoachExplainsCompanies"
         text="Companies generally do not offer jobs at interviews.  They interview lots of candidates and pick the most qualified people."
	 eval="addTop('CoachClosing')">
   <user text="oh, so no job yet.">
     <agent id="maycall" text="Right. But they may call you.">
       <user text="I sure hope so." >
	 <agent text="For now, please start again and just say thank you and good bye for now."/>
       </user>
       <user text="Seems like a lot of work for nothing." >
	 <agent id="justthanks" text="Start again and just say thank you and good bye for now.">
	 </agent>
       </user>
     </agent>
   </user>
   <user text="oh, too bad. okay.">
     <agent id="maychoose" text="But they may choose you.  For now, just say thank you and good bye.">
     </agent>
   </user>
 </agent>

  <t:script init="true">
    var useremotion;
    useremotion="sad";
    // add coaching toplevel goals
    // TODO: Once each of these has run, it does not run again

    function addTop (task) { $disco.addTop($disco.getTaskClass(task)); }
    addTop("CoachOpening"); 
    addTop("CoachGreeting1");
    addTop("CoachGreeting2");
    addTop("CoachResume");
    addTop("CoachClosing");
    
    // remove plugin that adds cancel items to menu
    $disco.removePlugin(Packages.edu.wpi.disco.plugin.ProposeShouldNotPlugin);
    // remove plugin that will re-propose toplevel goals
    $disco.removePlugin(Packages.edu.wpi.disco.plugin.TopsPlugin);

    // get pointer for disco instance for interview
    var $interview = $disco.getInteraction().getNWay().getActiveInteractions().get(1).getDisco();
    if ( $interview == $disco || $interview == undefined )
      println("WARNING: $interview not correctly defined. Check that Coach model loaded into proper configuration!");

    // TODO: These utility functions should eventually be moved into Java for speed

    // returns true iff given decomposition id chosen
    function isChosen (decomp) {
       return _chosen(decomp, null); 
    }

    // returns true iff a decomposition other than given id
    // has been chosen for same task class
    // TODO: task id can be removed by computing it from decomp
    function isOtherChosen (decomp, task) {
       return _chosen(decomp, "_"+task+"_tree"); 
    }

    function _chosen (decomp, task) {
       if ( $interview == undefined ) return false; // for initialization
       var focus = $interview.getFocus();
       return focus != null &amp;&amp;
              _checkDecomp(getRoot(focus), task, "_"+decomp+"_subtasks");
    }

    function _checkDecomp (plan, task, decomp) {
       var planDecomp = plan.getDecompositionClass();
       // TODO: check namespaces
       if ( planDecomp != null ) {
          if ( planDecomp.getId() == decomp ) {
             if ( task == null ) return true;  
          } else {
             if ( plan.getGoal().getType().getId() == task )
                return true;
          }
       }
       var children = plan.children();
       while (children.hasNext()) {
         if ( _checkDecomp(children.next(), task, decomp) ) return true;
       }
       return false;
    }

    function getRoot (plan) {
      var parent = plan.getParent();
      return parent == null ? plan : getRoot(parent);
    }

  </t:script>
</model>

 