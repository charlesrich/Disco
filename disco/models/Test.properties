# Properties file for Test.xml

IntEF@format = with great care and precision
IntEG@format = the quickest and cheapest way possible

UnauthTop@top = false
Unauth@authorized = false
# make RejectPlugin offer to reject answering this question
Reject(Ask.Who(Unauth))@generate = true

Propose.ShouldNot(A1)@generate = false

SayEval1@top = false
Optional2@top = false
Cycle1@top = false
Cycle2@top = false
Cycle3@top = false
RetryA@top = false
IterateArray@top = false
ModifiedC@top = false
BindingsValueTest@top = false
BindingsValueTestSubtasks@top = false
ProceduralA@top = false

# make sure cached inputs provided to { }
ModifiedA@format = execute ModifiedA on %1$s ({$this.input1}) and %2$s producing %3$s

A@interrupt = false
IntA@interrupt = false

NonPrimitive@primitive = false
NonPrimitive@top = false

Alt@format =  alt1|alt2|alt3
Ok@format = ok|yup|sure

How@top = false
HowPlus@top = false
Repeating@top = false
RepeatingMinMax@top = false
RepeatingAll@top = false
RepeatingBug@top = false

Default@top = false
DefaultTop@top = false

Ask.Should(IntA)@format = do you want to do IntA?
Ask.Should(B)@format = do you want to do B?
Ask.Should.Repeat(B)@format = do you want to do B again?

# force asking about decomp's one at a time
Ask.How(_How,how1)@generate = true
Ask.How(_How,how2)@generate = true
# following not needed, but doesn't hurt
# Ask.How(how3)@generate = true
# so how3 won't be chosen if only choice left (even if guessing)
how3@authorized = false

Optional3.input2@optional = true
Optional3.input3@optional = true

Ask.What(Optional3,input3)@generate = false

# so will use next recipe without asking
retryA1@authorized = true
retryA2@authorized = true
retryA3@authorized = true

Propose.ShouldNot(IterateArray)@generate = false
IterateArray@format = talk about cities you love

Ask.Should(IteratedTask)@format = do you want to know a city that I love?
Ask.Should.Repeat(IteratedTask)@format = another city?
Propose.Should.Repeat(IteratedTask)@format = another city
Propose.ShouldNot(IteratedTask)@format = no more cities

ProceduralA@decomposition = decomposeA($plan)
